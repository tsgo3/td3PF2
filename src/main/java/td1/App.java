/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package td1;

import java.util.List;

import td1.paires.IPaire;
import td1.paires.Paire;
import td1.arbresgeneriques2.Entier;
import td1.commandes.Categorie;
import td1.commandes.Commande;
import td1.commandes.DAO;
import td1.commandes.Produit;
import td1.arbresgeneriques2.Chaine;

public class App {

    public static void question21() {
        IPaire<Integer, String> p1 = new Paire<>(1, "un");
        System.out.println(p1);
        IPaire<Double, String> p2 = p1.changeFst(1.0);
        System.out.println(p2);
        IPaire<Double, IPaire<Integer, String>> p3 = p2.changeSnd(p1);
        System.out.println(p3);
    }

    public static void question31() {
        final td1.arbres.Arbre f1 = new td1.arbres.Feuille(1);
        final td1.arbres.Arbre f2 = new td1.arbres.Feuille(2);
        final td1.arbres.Arbre n1 = new td1.arbres.Noeud(List.of(f1, f2));
        final td1.arbres.Arbre f3 = new td1.arbres.Feuille(3);
        final td1.arbres.Arbre n2 = new td1.arbres.Noeud(List.of(n1, f3));
        System.out.println(n2.taille());
        System.out.println(n2.contient(1));
        System.out.println(n2.contient(2));
        System.out.println(n2.contient(3));
        System.out.println(n2.contient(4));
        System.out.println(n2.valeurs());
        System.out.println(n2.somme());
        System.out.println(n2.min());
        System.out.println(n2.max());
    }

    public static void question32() {
        System.out.println("-- Integer");
        final td1.arbresgeneriques1.Arbre<Integer> if1 = new td1.arbresgeneriques1.Feuille<>(1);
        final td1.arbresgeneriques1.Arbre<Integer> if2 = new td1.arbresgeneriques1.Feuille<>(2);
        final td1.arbresgeneriques1.Arbre<Integer> in1 = new td1.arbresgeneriques1.Noeud<>(List.of(if1, if2));
        final td1.arbresgeneriques1.Arbre<Integer> if3 = new td1.arbresgeneriques1.Feuille<>(3);
        final td1.arbresgeneriques1.Arbre<Integer> in2 = new td1.arbresgeneriques1.Noeud<>(List.of(in1, if3));
        System.out.println(in2.taille());
        System.out.println(in2.contient(1));
        System.out.println(in2.contient(2));
        System.out.println(in2.contient(3));
        System.out.println(in2.contient(4));
        System.out.println(in2.valeurs());
        System.out.println("-- String");
        final td1.arbresgeneriques1.Arbre<String> sf1 = new td1.arbresgeneriques1.Feuille<>("a");
        final td1.arbresgeneriques1.Arbre<String> sf2 = new td1.arbresgeneriques1.Feuille<>("b");
        final td1.arbresgeneriques1.Arbre<String> sn1 = new td1.arbresgeneriques1.Noeud<>(List.of(sf1, sf2));
        final td1.arbresgeneriques1.Arbre<String> sf3 = new td1.arbresgeneriques1.Feuille<>("c");
        final td1.arbresgeneriques1.Arbre<String> sn2 = new td1.arbresgeneriques1.Noeud<>(List.of(sn1, sf3));
        System.out.println(sn2.taille());
        System.out.println(sn2.contient("a"));
        System.out.println(sn2.contient("b"));
        System.out.println(sn2.contient("c"));
        System.out.println(sn2.contient("d"));
        System.out.println(sn2.valeurs());
    }

    public static void question33() {
        System.out.println("-- Entier");
        final td1.arbresgeneriques2.Arbre<Entier> if1 = new td1.arbresgeneriques2.Feuille<>(new Entier(1));
        final td1.arbresgeneriques2.Arbre<Entier> if2 = new td1.arbresgeneriques2.Feuille<>(new Entier(2));
        final td1.arbresgeneriques2.Arbre<Entier> in1 = new td1.arbresgeneriques2.Noeud<>(List.of(if1, if2));
        final td1.arbresgeneriques2.Arbre<Entier> if3 = new td1.arbresgeneriques2.Feuille<>(new Entier(3));
        final td1.arbresgeneriques2.Arbre<Entier> in2 = new td1.arbresgeneriques2.Noeud<>(List.of(in1, if3));
        System.out.println(in2.taille());
        System.out.println(in2.contient(new Entier(1)));
        System.out.println(in2.contient(new Entier(2)));
        System.out.println(in2.contient(new Entier(3)));
        System.out.println(in2.contient(new Entier(4)));
        System.out.println(in2.valeurs());
        System.out.println(in2.somme());
        System.out.println(in2.min());
        System.out.println(in2.max());
        System.out.println(in2.estTrie());
        System.out.println("-- Chaine");
        final td1.arbresgeneriques2.Arbre<Chaine> sf1 = new td1.arbresgeneriques2.Feuille<>(new Chaine("a"));
        final td1.arbresgeneriques2.Arbre<Chaine> sf2 = new td1.arbresgeneriques2.Feuille<>(new Chaine("b"));
        final td1.arbresgeneriques2.Arbre<Chaine> sn1 = new td1.arbresgeneriques2.Noeud<>(List.of(sf1, sf2));
        final td1.arbresgeneriques2.Arbre<Chaine> sf3 = new td1.arbresgeneriques2.Feuille<>(new Chaine("c"));
        final td1.arbresgeneriques2.Arbre<Chaine> sn2 = new td1.arbresgeneriques2.Noeud<>(List.of(sn1, sf3));
        System.out.println(sn2.taille());
        System.out.println(sn2.contient(new Chaine("a")));
        System.out.println(sn2.contient(new Chaine("b")));
        System.out.println(sn2.contient(new Chaine("c")));
        System.out.println(sn2.contient(new Chaine("d")));
        System.out.println(sn2.valeurs());
        System.out.println(sn2.somme());
        System.out.println(sn2.min());
        System.out.println(sn2.max());
        System.out.println(sn2.estTrie());
    }

    public static void exercice2() {
        question21();
    }

    public static void exercice3() {
        question31();
        question32();
        question33();
    }

    public static void exercice4() {
        DAO data = DAO.instance();
        // commandes (non normalisées puis normalisées)
        for (Commande c : data.commandes()) {
            System.out.println(c);
        }
        for (Commande c : data.commandes()) {
            System.out.println(c.normaliser());
        }
        // produits
        System.out.println(data.produits());
        // produits à TVA réduite (3 versions)
        System.out.println(data.selectionProduits(p -> p.cat() == Categorie.REDUIT));
        System.out.println(data.selectionProduits(p -> App.aTauxReduit(p)));
        System.out.println(data.selectionProduits(App::aTauxReduit));
        // produits à TVA réduite coûtant plus de 5 EUR
        System.out.println(data.selectionProduits(p -> p.cat() == Categorie.REDUIT && p.prix() > 5.0));
        // commandes de plus de 2 items
        System.out.println(data.selectionCommande(c -> c.lignes().size() > 2));
        // commandes contenant au moins un produit à TVA réduite commandé en plus de 2
        // exemplaires
        System.out.println(
                data.selectionCommandeSurExistanceLigne(l -> l.fst().cat() == Categorie.REDUIT && l.snd() > 2));
        // affichage des commandes sans réduction
        for (Commande c : data.commandes()) {
            System.out.println(c.affiche(App::calculSimple));
        }
        // affichage des commandes avec réduction
        for (Commande c : data.commandes()) {
            System.out.println(c.affiche(App::calculReduction));
        }
    }

    public static Boolean aTauxReduit(Produit p) {
        return p.cat() == Categorie.REDUIT;
    }

    /**
     * prix TTC = prix unitaire * (1 + taux TVA) * qté
     */
    public static Double calculSimple(Paire<Produit, Integer> ligne) {
        Produit p = ligne.fst();
        int qte = ligne.snd();
        return p.prix() * (1 + p.cat().tva()) * qte;
    }

    /**
     * réduction = si qté > 2 alors prix unitaire sinon 0 prix TTC = prix unitaire *
     * (1 + taux TVA) * qté - réduction
     */
    public static Double calculReduction(Paire<Produit, Integer> ligne) {
        Double reduction = (ligne.snd() > 2) ? ligne.fst().prix() : 0.0;
        return calculSimple(ligne) - reduction;
    }

    public static void main(final String[] args) {
        exercice2();
        exercice3();
        exercice4();
    }
}
